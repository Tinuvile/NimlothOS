//! # Micro File System (Micro-FS)
//!
//! 一个简单的文件系统实现，
//! 提供了完整的文件系统功能，包括文件管理、目录结构、块缓存等。
//!
//! ## 系统架构
//!
//! ```text
//! ┌─────────────────────────────────────────────────────────────┐
//! │                        Micro-FS                             │
//! ├─────────────────────────────────────────────────────────────┤
//! │    VFS Layer    │   MFS Layer   │        Block Layer        │
//! │    (vfs.rs)     │   (mfs.rs)    │     (block_cache.rs)      │
//! ├─────────────────────────────────────────────────────────────┤
//! │     Layout      │    Bitmap     │        Block Device       │
//! │   (layout.rs)   │  (bitmap.rs)  │      (block_dev.rs)       │
//! └─────────────────────────────────────────────────────────────┘
//! ```
//!
//! ## 核心模块
//!
//! - **VFS Layer**: 虚拟文件系统接口，提供统一的文件操作 API
//! - **MFS Layer**: Micro File System 核心实现，管理文件系统元数据
//! - **Layout**: 文件系统布局定义，包含超级块、inode、目录项等结构
//! - **Bitmap**: 位图管理，用于跟踪数据块和 inode 的分配状态
//! - **Block Cache**: 块缓存管理，提高 I/O 性能
//! - **Block Device**: 块设备抽象接口
//!
//! ## 文件系统布局
//!
//! ```text
//! ┌─────────────────────────────────────────────────────────────┐
//! │                        SuperBlock                           │
//! ├─────────────────────────────────────────────────────────────┤
//! │                       Inode Bitmap                          │
//! ├─────────────────────────────────────────────────────────────┤
//! │                        Inode Area                           │
//! ├─────────────────────────────────────────────────────────────┤
//! │                        Data Bitmap                          │
//! ├─────────────────────────────────────────────────────────────┤
//! │                         Data Area                           │
//! └─────────────────────────────────────────────────────────────┘
//! ```
//!
//! ## 主要特性
//!
//! - **简单高效**: 设计简洁，易于理解和扩展
//! - **类型安全**: 充分利用 Rust 的类型系统保证内存安全
//! - **缓存优化**: 内置块缓存机制，提高 I/O 性能
//! - **并发安全**: 支持多线程访问，使用锁机制保证数据一致性
//! - **可移植性**: 抽象块设备接口，支持不同的存储介质
//!
//! ## 使用示例
//!
//! ```rust
//! use micro_fs::{BlockManager, BlockDevice};
//!
//! // 创建文件系统
//! let mfs = BlockManager::create(block_device, 4096, 1, 4096, 4096);
//!
//! // 打开根目录
//! let root_inode = mfs.root_inode();
//!
//! // 创建文件
//! let file = root_inode.create("test.txt").unwrap();
//!
//! // 写入数据
//! file.write_at(0, b"Hello, Micro-FS!");
//!
//! // 读取数据
//! let mut buf = [0u8; 16];
//! file.read_at(0, &mut buf);
//! ```
//!
//! ## 性能特点
//!
//! - **块大小**: 512 字节，平衡空间利用率和 I/O 效率
//! - **缓存大小**: 16 个块，减少磁盘访问次数
//! - **索引结构**: 三级索引，支持最大 8MB 文件
//! - **分配策略**: 首次适应算法，快速定位可用资源
//!
//! ## 限制说明
//!
//! - 文件名最大长度：27 个字符
//! - 单个文件最大大小：约 8MB
//! - 文件系统最大大小：取决于块设备容量
//! - 并发访问：支持多线程，但需要适当的锁管理
extern crate alloc;

mod bitmap;
mod block_cache;
mod block_dev;
mod layout;
mod mfs;
mod vfs;

use bitmap::Bitmap;
pub use block_cache::{block_cache, block_cache_sync_all};
pub use block_dev::BlockDevice;
pub use layout::*;
pub use mfs::BlockManager;
pub use vfs::Inode;

/// 文件系统块大小（字节）
///
/// 每个块包含 512 字节，这是文件系统的基本存储单位。
/// 块大小影响文件系统的空间利用率和 I/O 性能。
///
/// ## 选择考虑
///
/// - **空间利用率**: 较小的块大小减少内部碎片
/// - **I/O 效率**: 较大的块大小提高顺序访问性能
/// - **内存使用**: 块大小影响缓存的内存占用
/// - **兼容性**: 512 字节是常见的块设备扇区大小
pub const BLOCK_SZ: usize = 512;
