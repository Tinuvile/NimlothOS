var searchIndex = new Map(JSON.parse('[["os",{"t":"CHCCQCQCQCCCQQHCCCCCCQCQISSSESSEESSSSSHFNNNNHNNNNEECFEONNNNNNNNCFSFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNKEEEEECEEECMMCMMTFFFTTFTTONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNHNNOHNNNNONNNNNNNNNNNNNNNNNNNNONPPPFFSGNONNNNNNNNONNNNNNNONNNHNNNNNONOONNNNNNNNNNNONNONFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHFJNNHNNNHNNHHNNNEEEEEEEEEEEEEECECECHECCEEEEESSFFFFKSISFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNOONMNNNNNNNNNNNNNNNNNNNNNNNNNFKIFFOMNNNNNNNOOMNNNOONHHHNNNNHNNNMNNOOONNNNNNNNNJJHHPPFFFGFTTTTONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNONNHHHNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNONONNNNONNHNNHHNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNOTTTFFFTTFFTTTNNNNNNNONNNNNNNNNNNNOONNNNNOONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNHHHHHECFNNNNONNNNNSSSSSSSSSSSSSSSSSCCHHHHHHHHHHHHHHSFEOHENNCEEENHNNCCCEEHCECNNNFNNNNNNNNOOONNNNNFFONHNNNNNNHNNNNNONNNNNNFFFFONNNNNNNNNONNNNNNNNNNNNHNNOHNONNNNNNNNNNNNNFFONNNNNOHHHNNNONNNNHHHNNNNNNNHPPFFGPNONNNNNNONNNNNOONNNNNNONNNNNOONOONOONNONNNNNNNNNNSSHHHECHHHHHHHFNNNNNOOONOONNNO","n":["board","clear_bss","config","console","debug","drivers","error","fs","info","lang_items","log","mm","print","println","rust_main","sbi","stack_trace","sync","syscall","task","timer","trace","trap","warn","BlockDeviceImpl","CLOCK_FREQ","MEMORY_END","MMIO","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT","USER_STACK_SIZE","kernel_stack_position","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","BLOCK_DEVICE","","block","BLOCK_DEVICE","VirtIOBlock","__private_field","borrow","borrow_mut","deref","from","into","try_from","try_into","type_id","virtio_blk","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","VirtioHal","__private_field","borrow","","","borrow_mut","","","deref","dma_alloc","dma_dealloc","from","","","into","","","new","phys_to_virt","read_block","try_from","","","try_into","","","type_id","","","virt_to_phys","write_block","File","OSInode","OpenFlags","Stderr","Stdin","Stdout","inode","list_apps","make_pipe","open_file","pipe","read","readable","stdio","writable","write","CREATE","OSInode","OSInodeInner","OpenFlags","RDONLY","RDWR","ROOT_INODE","TRUNC","WRONLY","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","","bitxor","bitxor_assign","borrow","","","","borrow_mut","","","","complement","contains","deref","difference","empty","extend","fmt","","","","from","","","","from_bits","from_bits_retain","","from_bits_truncate","from_iter","from_name","inner","inode","insert","intersection","intersects","into","","","","into_iter","is_all","is_empty","iter","iter_names","list_apps","new","not","offset","open_file","read","read_all","read_write","readable","","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","","","","try_into","","","","type_id","","","","union","writable","","write","Empty","Full","Normal","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_write_ends_closed","arr","available_read","available_write","borrow","","","borrow_mut","","","buffer","clone","clone_into","clone_to_uninit","eq","from","","","head","into","","","make_pipe","new","read","read_byte","read_end_with_buffer","readable","","set_write_end","status","tail","to_owned","try_from","","","try_into","","","type_id","","","writable","","write","write_byte","write_end","write_end_with_buffer","Stderr","Stdin","Stdout","borrow","","","borrow_mut","","","from","","","into","","","read","","","readable","","","try_from","","","try_into","","","type_id","","","writable","","","write","","","panic","SimpleLogger","TICK_COUNT","borrow","borrow_mut","cpu_id","enabled","flush","from","init","into","log","thread_id","timestamp","try_from","try_into","type_id","FrameTracker","KERNEL_SPACE","","MapPermission","MemorySet","PageTable","PageTableEntry","PhysAddr","PhysPageNum","StepByOne","UserBuffer","VPNRange","VirtAddr","VirtPageNum","address","frame_alloc","frame_allocator","frame_dealloc","heap_allocator","init","kernel_token","memory_set","page_table","remap_test","translated_byte_buffer","translated_ref","translated_refmut","translated_str","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","_ref","aligned","","borrow","","","","","","borrow_mut","","","","","","bytes_array","ceil","","clone","","","","","clone_into","","","","","clone_to_uninit","","","","","cmp","","","","current","end","","eq","","","","floor","","fmt","","","","from","","","","","","","","","","","","","","indexes","into","","","","","","into_iter","","l","","mut_ref","","new","","next","page_offset","","partial_cmp","","","","pte_array","r","","start","step","","","to_owned","","","","","try_from","","","","","","try_into","","","","","","type_id","","","","","","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","","borrow","","","borrow_mut","","","current","","dealloc","","deref","drop","end","","fmt","frame_alloc","frame_alloctor_test","frame_dealloc","from","","","init","init_frame_allocator","into","","","new","","","ppn","recycled","","try_from","","","try_into","","","type_id","","","HEAP_ALLOCATOR","HEAP_SPACE","alloc_error_handler","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","append_to","areas","bitand","bitand_assign","bitor","bitor_assign","bits","","bitxor","bitxor_assign","borrow","","","","","borrow_mut","","","","","clone","","clone_into","","clone_to_uninit","","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","erodata","etext","extend","fmt","","","","","from","","","","","from_another","from_bits","from_bits_retain","","from_bits_truncate","from_elf","from_existed_user","from_iter","from_name","insert","insert_framed_area","intersection","intersects","into","","","","","into_iter","is_all","is_empty","iter","iter_names","kernel_token","map","map_one","map_perm","map_trampoline","map_type","new","new_bare","new_kernel","not","page_table","push","recycle_data_pages","remap_test","remove","remove_area_with_start_vpn","sbss_with_stack","sdata","set","shrink_to","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","","toggle","token","translate","try_from","","","","","try_into","","","","","type_id","","","","","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","","","bitxor","bitxor_assign","borrow","","","","","borrow_mut","","","","","buffers","","clone","clone_into","clone_to_uninit","complement","contains","current_buffer","current_idx","difference","empty","","eq","executable","extend","find_pte","find_pte_create","flags","fmt","","","","frames","from","","","","","from_bits","from_bits_retain","","from_bits_truncate","from_iter","from_name","from_token","insert","intersection","intersects","into","","","","","into_iter","","","is_all","is_empty","is_valid","iter","iter_names","len","map","new","","","next","not","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","toggle","token","translate","translate_va","translated_byte_buffer","translated_ref","translated_refmut","translated_str","try_from","","","","","try_into","","","","","type_id","","","","","union","unmap","writable","console_getchar","console_putchar","shutdown","timer","print_stack_trace","UPSafeCell","up","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_CLOSE","SYSCALL_DUP","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_KILL","SYSCALL_OPEN","SYSCALL_PID","SYSCALL_PIPE","SYSCALL_READ","SYSCALL_SIGACTION","SYSCALL_SIGPROCMASK","SYSCALL_SIGRETURN","SYSCALL_TIME","SYSCALL_WAITPID","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","syscall","sys_close","sys_dup","sys_open","sys_pipe","sys_read","sys_write","sys_exec","sys_exit","sys_fork","sys_pid","sys_time","sys_waitpid","sys_yield","IDLE_PID","INITPROC","TaskContext","__private_field","add_initproc","add_task","borrow","borrow_mut","context","current_task","current_trap_cx","current_user_token","deref","exit_current_and_run_next","from","into","manager","pid","processor","run_tasks","schedule","suspend_current_and_run_next","switch","take_current_task","task","try_from","try_into","type_id","TaskContext","borrow","borrow_mut","clone","clone_into","clone_to_uninit","from","goto_trap_return","into","ra","s","sp","to_owned","try_from","try_into","type_id","zero_init","TASK_MANAGER","TaskManager","__private_field","add","add_task","borrow","","borrow_mut","","deref","fetch","fetch_task","from","","into","","new","ready_queue","try_from","","try_into","","type_id","","KernelStack","PID_ALLOCATOR","PidAllocator","PidHandle","__private_field","alloc","borrow","","","","borrow_mut","","","","current","dealloc","deref","drop","","from","","","","into","","","","kernel_stack_position","new","","pid","pid_alloc","push_on_top","recycled","top","try_from","","","","try_into","","","","type_id","","","","PROCESSOR","Processor","__private_field","borrow","","borrow_mut","","current","","current_task","current_trap_cx","current_user_token","deref","from","","idle_task_cx","idle_task_cx_ptr","into","","new","run_tasks","schedule","take_current_task","task_current","try_from","","try_into","","type_id","","__switch","Ready","Running","TaskControlBlock","TaskControlBlockInner","TaskStatus","Zombie","alloc_fd","base_size","borrow","","","borrow_mut","","","children","clone","clone_into","clone_to_uninit","eq","exec","exit_code","fd_table","fmt","fork","from","","","getpid","inner","inner_exclusive_access","into","","","is_zombie","kernel_stack","memory_set","new","parent","pid","status","task_cx","task_status","to_owned","trap_cx","trap_cx_ppn","try_from","","","try_into","","","type_id","","","user_token","MSEC_PER_SEC","TICKS_PER_SEC","next_trigger","time","time_ms","TrapContext","context","enable_timer_interrupt","init","set_kernel_trap_entry","set_user_trap_entry","trap_from_kernel","trap_handler","trap_return","TrapContext","app_init_context","borrow","borrow_mut","from","into","kernel_satp","kernel_sp","sepc","sp","sstatus","trap_handler","try_from","try_into","type_id","x"],"q":[[0,"os"],[24,"os::board"],[28,"os::config"],[39,"os::console"],[49,"os::drivers"],[52,"os::drivers::block"],[64,"os::drivers::block::virtio_blk"],[98,"os::fs"],[114,"os::fs::inode"],[207,"os::fs::pipe"],[262,"os::fs::stdio"],[298,"os::lang_items"],[299,"os::log"],[315,"os::mm"],[343,"os::mm::address"],[471,"os::mm::frame_allocator"],[520,"os::mm::heap_allocator"],[524,"os::mm::memory_set"],[661,"os::mm::page_table"],[787,"os::sbi"],[791,"os::stack_trace"],[792,"os::sync"],[794,"os::sync::up"],[805,"os::syscall"],[825,"os::syscall::fs"],[831,"os::syscall::process"],[838,"os::task"],[866,"os::task::context"],[883,"os::task::manager"],[907,"os::task::pid"],[954,"os::task::processor"],[984,"os::task::switch"],[985,"os::task::task"],[1040,"os::timer"],[1045,"os::trap"],[1054,"os::trap::context"],[1070,"core::fmt"],[1071,"core::result"],[1072,"core::any"],[1073,"easy_fs::block_dev"],[1074,"alloc::sync"],[1075,"alloc::vec"],[1076,"easy_fs::vfs"],[1077,"core::iter::traits::collect"],[1078,"core::option"],[1079,"bitflags::iter"],[1080,"core::panic::panic_info"],[1081,"log"],[1082,"core::marker"],[1083,"core::cmp"],[1084,"core::clone"],[1085,"buddy_system_allocator"],[1086,"core::alloc::layout"],[1087,"alloc::collections::btree::map"],[1088,"alloc::string"],[1089,"core::cell"],[1090,"alloc::collections::vec_deque"],[1091,"riscv::register::sstatus"]],"i":"````````````````````````````````````````Ad000`0000`````Aj00000000`````B`BjLj210220010210210110210210201```````````C`0`00Ch```00`00Cf111111111DhDf2310233323333333102333333301333102333333`031`003003333331023102310233000Ed00````Dn000Eb12012022220121012`1010001112012012012000110```EfEhEj210210210210210210210210210210```En0`000`00``000````````````````````````````````````````Fd0FfGl21FhFjFl3542102545421054210542105421303542154542135554442221110135421030Gn1634146565323011Fn4376432576432576432576432`````HbHdHf0Bb31031Hh3241201```2142`214321120214214214````Ih0`````Ib000HnI`2Id1333333330124301243434343330023```34``3433330124303333113331330124333333`000100113111`31``30```333433110124301243012433000Il00```00``0000000000H`11IfCbIn432104310333440044343422344442210434444442444210431044434412213043342444434222````210432104321043423````````Bf000000000````````````````````````````````````Jh``00````0`00`````````000`Jl000000000000000``JnK``010110`010100010101````KdKfKh1Kj312032231012031203`200`020120312031203``KnL`10100```10100010```0010101`Lf0```0Ld0Jj1201212222011200120000121010101112110120120121```````````````Lb00000000000000","f":"`{{}b}````````````{{}d}``````````{{}f}0{{}h}`11``11111{f{{j{ff}}}}`{h{{h{c}}}{}}{{{h{l}}}{{h{lc}}}{}}{cc{}}{{}c{}}{nb}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{hAb}{{{h{lAd}}{h{Af}}}Ah}`````{Ajb}98{{{h{Aj}}}{{h{{An{Al}}}}}}87543``=``{B`b};;;:::{{{h{B`}}}{{h{{Bf{{Bd{Bb}}}}}}}}{ff}{{ff}Bh}<<<;;;{{}Bj}2{{{h{Bj}}f{h{l{Bn{Bl}}}}}b};;;:::9993{{{h{Bj}}f{h{{Bn{Bl}}}}}b}```````````{{{h{C`}}Cb}f}{{{h{C`}}}Cd}`01`````````{Cfb}{{}Ch}{{ChCh}Ch}{{{h{lCh}}Ch}b}10{{{h{Ch}}}Cj}021{h{{h{c}}}{}}000{{{h{l}}}{{h{lc}}}{}}000{ChCh}{{{h{Ch}}Ch}Cd}{{{h{Cf}}}{{h{{An{Cl}}}}}}78{{{h{lCh}}c}b{{D`{}{{Cn{Ch}}}}}}{{{h{Ch}}{h{lDb}}}Ah}000{cc{}}000{Cj{{Dd{Ch}}}}{CjCh}00{cCh{{D`{}{{Cn{Ch}}}}}}{{{h{Af}}}{{Dd{Ch}}}}{DfBf}{DhAn}?{{ChCh}Ch};{{}c{}}000{Chc{}}{{{h{Ch}}}Cd}0{{{h{Ch}}}{{Dj{Ch}}}}{{{h{Ch}}}{{Dl{Ch}}}}{{}b}{{CdCd{An{Cl}}}Df}{ChCh}{Dhf}{{{h{Af}}Ch}{{Dd{{An{Df}}}}}}{{{h{Df}}Cb}f}{{{h{Df}}}{{Bd{Bl}}}}{{{h{Ch}}}{{j{CdCd}}}}{{{h{Df}}}Cd}{DfCd}{{{h{lCh}}Ch}b}{{{h{lCh}}ChCd}b}{{ChCh}Ch}202{c{{A`{e}}}{}{}}000{{}{{A`{c}}}{}}000{hAb}000376:`````{{}f}`{{{h{Dn}}}Cd}{DnE`}{{{h{Dn}}}f}0{h{{h{c}}}{}}00{{{h{l}}}{{h{lc}}}{}}00{EbAn}{{{h{Ed}}}Ed}{{h{h{lc}}}b{}}{{hBl}b}{{{h{Ed}}{h{Ed}}}Cd}{cc{}}00{Dnf}{{}c{}}00{{}{{j{{An{Eb}}{An{Eb}}}}}}{{}Dn}{{{h{Eb}}Cb}f}{{{h{lDn}}}Bl}{{{An{{Bf{Dn}}}}}Eb}{{{h{Eb}}}Cd}{EbCd}{{{h{lDn}}{h{{An{Eb}}}}}b}{DnEd}:{hc{}}{c{{A`{e}}}{}{}}00{{}{{A`{c}}}{}}00{hAb}0076:{{{h{lDn}}Bl}b}{DnDd}:```{h{{h{c}}}{}}00{{{h{l}}}{{h{lc}}}{}}00{cc{}}00{{}c{}}00{{{h{Ef}}Cb}f}{{{h{Eh}}Cb}f}{{{h{Ej}}Cb}f}{{{h{Ef}}}Cd}{{{h{Eh}}}Cd}{{{h{Ej}}}Cd}>>>===<<<210543{{{h{El}}}d}`{{}f};:0{{{h{En}}{h{F`}}}Cd}{{{h{En}}}b};{{}b};{{{h{En}}{h{Fb}}}b}44{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{hAb}```````````````````4````````77`````7`7``{{{h{Fd}}}{{h{c}}}{}}{{{h{Fd}}}Cd}{{{h{Ff}}}Cd}{h{{h{c}}}{}}00000{{{h{l}}}{{h{lc}}}{}}00000{{{h{Fh}}}{{h{l{Bn{Bl}}}}}}{{{h{Fd}}}Fh}{{{h{Ff}}}Fj}{{{h{Fd}}}Fd}{{{h{Ff}}}Ff}{{{h{Fh}}}Fh}{{{h{Fj}}}Fj}{{{h{{Fl{c}}}}}{{Fl{c}}}{FnG`GbGdGfGh}}{{h{h{lc}}}b{}}0000{{hBl}b}0000{{{h{Fd}}{h{Fd}}}Gj}{{{h{Ff}}{h{Ff}}}Gj}{{{h{Fh}}{h{Fh}}}Gj}{{{h{Fj}}{h{Fj}}}Gj}{Gl}{{{h{{Fl{c}}}}}c{FnG`GbGdGf}}1{{{h{Fd}}{h{Fd}}}Cd}{{{h{Ff}}{h{Ff}}}Cd}{{{h{Fh}}{h{Fh}}}Cd}{{{h{Fj}}{h{Fj}}}Cd}{{{h{Fd}}}Fh}{{{h{Ff}}}Fj}{{{h{Fd}}{h{lDb}}}Ah}{{{h{Ff}}{h{lDb}}}Ah}{{{h{Fh}}{h{lDb}}}Ah}{{{h{Fj}}{h{lDb}}}Ah}{cc{}}{fFd}{FhFd}22{fFf}{FjFf}{fFh}5{FdFh}{fFj}7{FfFj}8{{{h{Fj}}}{{E`{f}}}}{{}c{}}00000{{}c{}}{{{Fl{c}}}e{FnG`GbGdGf}{}}{GnFj}{Fl}{{{h{Fd}}}{{h{lc}}}{}}{{{h{Fh}}}{{h{lc}}}{}}{{cc}{{Gl{c}}}{FnG`GbGdGf}}{{cc}{{Fl{c}}}{FnG`GbGdGf}}{{{h{l{Gl{c}}}}}{{Dd{e}}}{FnG`GbGdGf}{}}{{{h{Fd}}}f}{{{h{Ff}}}f}{{{h{Fd}}{h{Fd}}}{{Dd{Gj}}}}{{{h{Ff}}{h{Ff}}}{{Dd{Gj}}}}{{{h{Fh}}{h{Fh}}}{{Dd{Gj}}}}{{{h{Fj}}{h{Fj}}}{{Dd{Gj}}}}{{{h{Fh}}}{{h{l{Bn{H`}}}}}}=<{{{h{{Fl{c}}}}}c{FnG`GbGdGf}}{{{h{lFn}}}b}{{{h{lFh}}}b}{{{h{lFj}}}b}{hc{}}0000{c{{A`{e}}}{}{}}00000{{}{{A`{c}}}{}}00000{hAb}00000`````{Hbb}{{{h{lHd}}}{{Dd{Fh}}}}{{{h{lHf}}}{{Dd{Fh}}}}{h{{h{c}}}{}}00{{{h{l}}}{{h{lc}}}{}}00{Hff}{Hhf}{{{h{lHd}}Fh}b}{{{h{lHf}}Fh}b}{{{h{Hb}}}{{h{{Bf{Hf}}}}}}{{{h{lBb}}}b}54{{{h{Bb}}{h{lDb}}}Ah}{{}{{Dd{Bb}}}}{{}b}{Fhb}{cc{}}00{{{h{lHf}}FhFh}b}3{{}c{}}00{{}Hd}{{}Hf}{FhBb}{BbFh}{HfBd}{HhBd}{c{{A`{e}}}{}{}}00{{}{{A`{c}}}{}}00{hAb}00{{}Hj}{{}E`}{Hld}{{}b}```````````{Hnb}{{{h{I`}}}b}{{}Ib}{{{h{lId}}{h{lIf}}Fj}b}{I`Bd}{{IbIb}Ib}{{{h{lIb}}Ib}b}10{{{h{Ib}}}Bl}021{h{{h{c}}}{}}0000{{{h{l}}}{{h{lc}}}{}}0000{{{h{Ih}}}Ih}{{{h{Ib}}}Ib}{{h{h{lc}}}b{}}0{{hBl}b}0{IbIb}{{{h{Ib}}Ib}Cd}{{{h{lId}}{h{If}}{h{{Bn{Bl}}}}}b}{IdIj}{{{h{Hn}}}{{h{{An{{Bf{I`}}}}}}}}={{}b}00{{}Ib}{{{h{Ih}}{h{Ih}}}Cd}22{{{h{lIb}}c}b{{D`{}{{Cn{Ib}}}}}}{{{h{Ih}}{h{lDb}}}Ah}{{{h{Ib}}{h{lDb}}}Ah}000{cc{}}0000{{{h{Id}}}Id}{Bl{{Dd{Ib}}}}{BlIb}00{{{h{{Bn{Bl}}}}}{{j{I`ff}}}}{{{h{I`}}}I`}{cIb{{D`{}{{Cn{Ib}}}}}}{{{h{Af}}}{{Dd{Ib}}}}{{{h{lIb}}Ib}b}{{{h{lI`}}FfFfIb}b}{{IbIb}Ib}{{{h{Ib}}Ib}Cd}{{}c{}}0000{Ibc{}}{{{h{Ib}}}Cd}0{{{h{Ib}}}{{Dj{Ib}}}}{{{h{Ib}}}{{Dl{Ib}}}}{{}f}{{{h{lId}}{h{lIf}}}b}{{{h{lId}}{h{lIf}}Fj}b}{IdIb}{{{h{lI`}}}b}{IdIh}{{FfFfIhIb}Id}{{}I`}0{IbIb}{I`If}{{{h{lI`}}Id{Dd{{h{{Bn{Bl}}}}}}}b}6{{}b}{{{h{lIb}}Ib}b}{{{h{lI`}}Fj}b}22{{{h{lIb}}IbCd}b}<333{{IbIb}Ib}30{hc{}}04{{{h{I`}}}f}{{{h{I`}}Fj}{{Dd{H`}}}}{c{{A`{e}}}{}{}}0000{{}{{A`{c}}}{}}0000{hAb}00006{{{h{lId}}{h{lIf}}}b}{{{h{lId}}{h{lIf}}Fj}b}{IdFl}`````````````{{}Il}{{IlIl}Il}{{{h{lIl}}Il}b}10{{{h{Il}}}Bl}0{H`f}32{h{{h{c}}}{}}0000{{{h{l}}}{{h{lc}}}{}}0000{CbBd}{InBd}{{{h{H`}}}H`}{{h{h{lc}}}b{}}{{hBl}b}{IlIl}{{{h{Il}}Il}Cd}{Inf}0=>{{}H`}{{{h{Il}}{h{Il}}}Cd}{{{h{H`}}}Cd}{{{h{lIl}}c}b{{D`{}{{Cn{Il}}}}}}{{{h{If}}Fj}{{Dd{{h{lH`}}}}}}{{{h{lIf}}Fj}{{Dd{{h{lH`}}}}}}{{{h{H`}}}Il}{{{h{Il}}{h{lDb}}}Ah}000{IfBd}{cc{}}0000{Bl{{Dd{Il}}}}{BlIl}00{cIl{{D`{}{{Cn{Il}}}}}}{{{h{Af}}}{{Dd{Il}}}}{fIf}{{{h{lIl}}Il}b}{{IlIl}Il}{{{h{Il}}Il}Cd}{{}c{}}0000{Cbc{}}{{}c{}}{Ilc{}}{{{h{Il}}}Cd}0{{{h{H`}}}Cd}{{{h{Il}}}{{Dj{Il}}}}{{{h{Il}}}{{Dl{Il}}}}{{{h{Cb}}}f}{{{h{lIf}}FjFhIl}b}{{}If}{{{Bd{{h{l{Bn{Bl}}}}}}}Cb}{{FhIl}H`}{{{h{lIn}}}{{Dd{c}}}{}}{IlIl}{{{h{H`}}}Fh}:{{{h{lIl}}Il}b}{IfFh}{{{h{lIl}}IlCd}b}{{IlIl}Il}30{hc{}}4{{{h{If}}}f}{{{h{If}}Fj}{{Dd{H`}}}}{{{h{If}}Ff}{{Dd{Fd}}}}{{fBlf}{{Bd{{h{l{Bn{Bl}}}}}}}}{f{{h{c}}}{}}{f{{h{lc}}}{}}{{fBl}J`}{c{{A`{e}}}{}{}}0000{{}{{A`{c}}}{}}0000{hAb}0000;{{{h{lIf}}Fj}b}{{{h{H`}}}Cd}{{}f}{fb}{Cdd}1{{}b}```{h{{h{c}}}{}}{{{h{l}}}{{h{lc}}}{}}{{{h{{Bf{c}}}}}{{Jb{c}}}{}}{cc{}}{BfJd}{{}c{}}{c{{Bf{c}}}{}}?>=:::::::::::::::::``{{f{E`{f}}}Jf}{fJf}0{{BlCj}Jf}1{{fBlf}Jf}0{{Blf}Jf}{BhJf}{{}Jf}00{{JfBh}Jf}1{{}f}``{Jhb}{{}b}`{h{{h{c}}}{}}{{{h{l}}}{{h{lc}}}{}}````{{{h{Jh}}}{{h{{An{Jj}}}}}}{Bhb}{cc{}}{{}c{}}`````6```{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{hAb}`87{{{h{Jl}}}Jl}{{h{h{lc}}}b{}}{{hBl}b}7{fJl}7{Jlf}{JlE`}1{hc{}}987{{}Jl}``{Jnb}{{{h{lK`}}{An{Jj}}}b}{{{An{Jj}}}b}{h{{h{c}}}{}}0{{{h{l}}}{{h{lc}}}{}}0{{{h{Jn}}}{{h{{Bf{K`}}}}}}{{{h{lK`}}}{{Dd{{An{Jj}}}}}}{{}{{Dd{{An{Jj}}}}}}{cc{}}0{{}c{}}0{{}K`}{K`Kb}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{hAb}0````{Kdb}{{{h{lKf}}}Kh}====<<<<{Kff}{{{h{lKf}}f}b}{{{h{Kd}}}{{h{{Bf{Kf}}}}}}{{{h{lKh}}}b}{{{h{lKj}}}b}====<<<<{f{{j{ff}}}}{{}Kf}{{{h{Kh}}}Kj}{Kjf}{{}Kh}{{{h{Kj}}c}{}Kl}{KfBd}{{{h{Kj}}}f}{c{{A`{e}}}{}{}}000{{}{{A`{c}}}{}}000{hAb}000``{Knb}{h{{h{c}}}{}}0{{{h{l}}}{{h{lc}}}{}}0{{{h{L`}}}{{Dd{{An{Jj}}}}}}{L`Dd}{{}{{Dd{{An{Jj}}}}}}{{}{{h{lLb}}}}{{}f}{{{h{Kn}}}{{h{{Bf{L`}}}}}}{cc{}}0{L`Jl}{{{h{lL`}}}Jl}{{}c{}}0{{}L`}{{}b}{Jlb}:{{{h{lL`}}}{{Dd{{An{Jj}}}}}}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{hAb}0{{JlJl}b}``````{{{h{lLd}}}f}{Ldf}{h{{h{c}}}{}}00{{{h{l}}}{{h{lc}}}{}}00{LdBd}{{{h{Lf}}}Lf}{{h{h{lc}}}b{}}{{hBl}b}{{{h{Lf}}{h{Lf}}}Cd}{{{h{Jj}}{h{{Bn{Bl}}}}{Bd{J`}}}b}{LdBh}6{{{h{Lf}}{h{lDb}}}Ah}{{{h{{An{Jj}}}}}{{An{Jj}}}}{cc{}}00{{{h{Jj}}}f}{JjBf}{{{h{Jj}}}{{Jb{Ld}}}}{{}c{}}00{{{h{Ld}}}Cd}{JjKj}{LdI`}{{{h{{Bn{Bl}}}}}Jj}{LdDd}{JjKh}{{{h{Ld}}}Lf}{LdJl}{LdLf}{hc{}}{{{h{Ld}}}{{h{lLb}}}}{LdFh}{c{{A`{e}}}{}{}}00{{}{{A`{c}}}{}}00{hAb}00{{{h{Ld}}}f}{{}f}0{{}b}11``0000{{}d}00`{{fffff}Lb}{h{{h{c}}}{}}{{{h{l}}}{{h{lc}}}{}}{cc{}}{{}c{}}{Lbf}00{{{h{lLb}}f}b}{LbLh}2>=<{LbE`}","D":"DG`","p":[[1,"unit"],[1,"never"],[1,"usize"],[1,"reference",null,null,1],[1,"tuple",null,null,1],[0,"mut"],[5,"Arguments",1070],[6,"Result",1071,null,1],[5,"TypeId",1072],[5,"Stdout",39],[1,"str"],[8,"Result",1070],[5,"BLOCK_DEVICE",52],[10,"BlockDevice",1073],[5,"Arc",1074,null,1],[5,"QUEUE_FRAMES",64],[5,"FrameTracker",471],[5,"Vec",1075],[5,"UPSafeCell",794],[1,"i32"],[5,"VirtIOBlock",64],[1,"u8"],[1,"slice"],[10,"File",98],[5,"UserBuffer",661],[1,"bool"],[5,"ROOT_INODE",114],[5,"OpenFlags",114],[1,"u32"],[5,"Inode",1076],[17,"Item"],[10,"IntoIterator",1077],[5,"Formatter",1070],[6,"Option",1078,null,1],[5,"OSInode",114],[5,"OSInodeInner",114],[5,"Iter",1079],[5,"IterNames",1079],[5,"PipeRingBuffer",207],[1,"array"],[5,"Pipe",207],[6,"RingBufferStatus",207],[5,"Stdin",262],[5,"Stdout",262],[5,"Stderr",262],[5,"PanicInfo",1080],[5,"SimpleLogger",299],[5,"Metadata",1081],[5,"Record",1081],[5,"PhysAddr",343],[5,"VirtAddr",343],[5,"PhysPageNum",343],[5,"VirtPageNum",343],[5,"SimpleRange",343],[10,"StepByOne",343],[10,"Copy",1082],[10,"PartialEq",1083],[10,"PartialOrd",1083],[10,"Debug",1070],[10,"Clone",1084],[6,"Ordering",1083],[5,"SimpleRangeIterator",343],[8,"VPNRange",343],[5,"PageTableEntry",661],[5,"FRAME_ALLOCATOR",471],[10,"FrameAllocator",471],[5,"StackFrameAllocator",471],[8,"FrameAllocatorImpl",471],[5,"LockedHeap",1085],[5,"Layout",1086],[5,"KERNEL_SPACE",524],[5,"MemorySet",524],[5,"MapPermission",524],[5,"MapArea",524],[5,"PageTable",661],[6,"MapType",524],[5,"BTreeMap",1087],[5,"PTEFlags",661],[5,"UserBufferIterator",661],[5,"String",1088],[5,"RefMut",1089],[5,"RefCell",1089],[1,"isize"],[5,"INITPROC",838],[5,"TaskControlBlock",985],[5,"TaskContext",866],[5,"TASK_MANAGER",883],[5,"TaskManager",883],[5,"VecDeque",1090],[5,"PID_ALLOCATOR",907],[5,"PidAllocator",907],[5,"PidHandle",907],[5,"KernelStack",907],[10,"Sized",1082],[5,"PROCESSOR",954],[5,"Processor",954],[5,"TrapContext",1054],[5,"TaskControlBlockInner",985],[6,"TaskStatus",985],[5,"Sstatus",1091],[5,"VirtioHal",64]],"r":[[28,24],[31,24],[32,24],[49,52],[50,52],[53,64],[99,114],[100,114],[101,262],[102,262],[103,262],[105,114],[106,207],[107,114],[315,471],[316,524],[317,524],[318,524],[319,524],[320,661],[321,661],[322,343],[323,343],[324,343],[325,661],[326,343],[327,343],[328,343],[330,471],[332,471],[335,524],[338,524],[339,661],[340,661],[341,661],[342,661],[792,794],[840,866],[843,883],[847,954],[848,954],[849,954],[857,954],[858,954],[861,954],[1045,1054]],"b":[[129,"impl-Flags-for-OpenFlags"],[130,"impl-OpenFlags"],[147,"impl-UpperHex-for-OpenFlags"],[148,"impl-LowerHex-for-OpenFlags"],[149,"impl-Octal-for-OpenFlags"],[150,"impl-Binary-for-OpenFlags"],[156,"impl-Flags-for-OpenFlags"],[157,"impl-OpenFlags"],[406,"impl-From%3Cusize%3E-for-PhysAddr"],[407,"impl-From%3CPhysPageNum%3E-for-PhysAddr"],[410,"impl-From%3Cusize%3E-for-VirtAddr"],[411,"impl-From%3CVirtPageNum%3E-for-VirtAddr"],[412,"impl-From%3Cusize%3E-for-PhysPageNum"],[414,"impl-From%3CPhysAddr%3E-for-PhysPageNum"],[415,"impl-From%3Cusize%3E-for-VirtPageNum"],[417,"impl-From%3CVirtAddr%3E-for-VirtPageNum"],[544,"impl-MapPermission"],[545,"impl-Flags-for-MapPermission"],[579,"impl-UpperHex-for-MapPermission"],[580,"impl-LowerHex-for-MapPermission"],[581,"impl-Octal-for-MapPermission"],[582,"impl-Binary-for-MapPermission"],[590,"impl-Flags-for-MapPermission"],[591,"impl-MapPermission"],[679,"impl-PTEFlags"],[680,"impl-Flags-for-PTEFlags"],[712,"impl-LowerHex-for-PTEFlags"],[713,"impl-Binary-for-PTEFlags"],[714,"impl-UpperHex-for-PTEFlags"],[715,"impl-Octal-for-PTEFlags"],[723,"impl-Flags-for-PTEFlags"],[724,"impl-PTEFlags"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAPYBcgAZAAQAIAABACkAAQAuAAIAMgABADYABAA9AAIARQAHAFgACABkAAQAagADAHMAAAB3AAEAegACAIIAAACGAAcAkAAAAJQAAwCdAAAAogABAKsAAACzAAAAuQAAAMAACwDOAAAA0AAVAOkAAADtABkACgEFABwBCAAuAQEAOQEQAEsBAABNAQAAUAEAAFMBBgBfAQAAYQEAAGcBCwB2ARMAiwEEAJIBAwCXAQEAmwECAJ8BAQCiAQAAqwEAAK0BAQC2AQMAuwEBAMEBFgDdAQAA4AEFAOoBAAAAAggAGAIAABwCAAAiAgAAJQIPADgCAQA7AgIAPwICAEMCBABPAgAAXwIAAGcCAABpAgAAbgIAAHQCAQB4AgIAfgIBAIMCDgCVAgAAqQIAAK0CCQC5AgIAwwIAAMkCAwDUAgAA4wIBAPkCAAD/AgAAAgMOABkDAAAcAwEAIwMTADsDAAA9AwAASQMBAEwDAgBQAwMAWgMBAF4DAABgAwIAZAMEAG8DAwB2AwAAeQMEAIYDBQCQAwAAkgMHAJwDAgCvAwsAvQMEAMcDAADTAwUA4gMFAOkDAwDwAwAABAQAAAcECAAWBAAAIQQBACsEAgA=","P":[[40,"T"],[43,"U"],[44,""],[45,"U,T"],[46,"U"],[47,""],[55,"T"],[57,""],[58,"T"],[59,"U"],[60,"U,T"],[61,"U"],[62,""],[69,"T"],[75,""],[78,"T"],[81,"U"],[84,""],[87,"U,T"],[90,"U"],[93,""],[133,"T"],[141,""],[146,"T"],[147,""],[151,"T"],[155,""],[159,"T"],[160,""],[166,"U"],[170,"IntoIterator::IntoIter"],[171,""],[191,"U,T"],[195,"U"],[199,""],[218,"T"],[224,""],[226,"T"],[227,""],[229,"T"],[232,""],[233,"U"],[236,""],[246,"T"],[247,"U,T"],[250,"U"],[253,""],[265,"T"],[274,"U"],[277,""],[283,"U,T"],[286,"U"],[289,""],[301,"T"],[303,""],[306,"T"],[307,""],[308,"U"],[309,""],[312,"U,T"],[313,"U"],[314,""],[355,"T"],[356,""],[358,"T"],[370,""],[377,"T"],[383,""],[393,"T"],[394,""],[405,"T"],[406,""],[408,"T"],[410,""],[413,"T"],[414,""],[416,"T"],[417,""],[418,"T"],[419,""],[420,"U"],[426,"I"],[427,"T,IntoIterator::IntoIter"],[428,""],[430,"T"],[434,"T,Iterator::Item"],[435,""],[444,"T"],[445,""],[448,"T"],[453,"U,T"],[459,"U"],[465,""],[479,"T"],[485,""],[497,"T"],[500,""],[502,"U"],[505,""],[511,"U,T"],[514,"U"],[517,""],[548,"T"],[558,""],[560,"T"],[562,""],[577,"T"],[578,""],[583,"T"],[588,""],[595,"T"],[596,""],[601,"U"],[606,"IntoIterator::IntoIter"],[607,""],[637,"T"],[639,""],[642,"U,T"],[647,"U"],[652,""],[684,"T"],[694,""],[697,"T"],[698,""],[708,"T"],[709,""],[717,"T"],[722,""],[726,"T"],[727,""],[732,"U"],[737,"IntoIterator::IntoIter"],[738,"I"],[739,"IntoIterator::IntoIter"],[740,""],[750,"Iterator::Item"],[751,""],[760,"T"],[761,""],[766,"T"],[768,""],[769,"U,T"],[774,"U"],[779,""],[795,"T"],[799,""],[800,"U"],[801,"T"],[802,"U,T"],[803,"U"],[804,""],[844,"T"],[850,""],[852,"T"],[853,"U"],[859,""],[863,"U,T"],[864,"U"],[865,""],[867,"T"],[869,""],[870,"T"],[871,""],[872,"T"],[873,""],[874,"U"],[875,""],[878,"T"],[879,"U,T"],[880,"U"],[881,""],[888,"T"],[892,""],[895,"T"],[897,"U"],[899,""],[901,"U,T"],[903,"U"],[905,""],[913,"T"],[921,""],[926,"T"],[930,"U"],[934,""],[939,"T"],[940,""],[942,"U,T"],[946,"U"],[950,""],[957,"T"],[961,""],[967,"T"],[969,""],[971,"U"],[973,""],[978,"U,T"],[980,"U"],[982,""],[993,"T"],[999,""],[1001,"T"],[1002,""],[1009,"T"],[1012,""],[1015,"U"],[1018,""],[1027,"T"],[1028,""],[1030,"U,T"],[1033,"U"],[1036,""],[1056,"T"],[1059,"U"],[1060,""],[1066,"U,T"],[1067,"U"],[1068,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[26550]}