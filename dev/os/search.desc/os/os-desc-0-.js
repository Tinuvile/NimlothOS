searchState.loadedDescShard("os", 0, "NimlothOS\nNimlothOS用到的qemu相关常量\n清零 BSS 段\n内核配置常量\n控制台输出模块\n调试级别日志宏\n设备驱动模块\n错误级别日志宏\n文件系统模块\n信息级别日志宏\n语言项实现模块\n日志系统模块\n内存管理模块\n格式化打印宏（不换行）\n格式化打印宏（带换行）\n内核主入口函数\nSBI (Supervisor Binary Interface) 封装\n栈追踪和调试模块\n同步原语模块\n系统调用处理模块\n任务管理模块\n时钟和定时器管理模块\n跟踪级别日志宏\n陷阱和中断处理模块\n警告级别日志宏\n内核堆大小 (3MB)\n内核栈大小 (8KB)\n页面大小 (4KB)\n页面大小的位数 (12 位)\n跳板页地址\n陷阱上下文页地址\n用户栈大小 (8KB)\n计算指定应用程序的内核栈位置\n标准输出结构体\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n格式化输出函数\n将字符串写入标准输出\n块设备驱动模块\n全局块设备实例\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVirtIO 块设备驱动实现\n队列帧管理器\nVirtIO 块设备在内存映射 I/O 中的基地址\nVirtIO 块设备驱动结构\nVirtIO 硬件抽象层实现\n分配 DMA 内存\n释放 DMA 内存\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的 VirtIO 块设备实例\n物理地址到虚拟地址的转换\n从块设备读取数据\n虚拟地址到物理地址的转换\n向块设备写入数据\n文件抽象接口\n文件 Inode 管理模块\n从文件读取数据\n检查文件是否可读\n标准输入输出模块\n检查文件是否可写\n向文件写入数据\n操作系统级别的文件 Inode\nOSInode 的内部状态结构\n文件打开标志位\n全局根目录 Inode 实例\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n列出应用程序列表\n创建新的 OSInode 实例\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n打开文件\n从文件读取数据到用户缓冲区\n读取整个文件内容\n解析读写权限\n检查文件是否可读\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n检查文件是否可写\n向文件写入数据\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n标准错误设备\n标准输入设备\n标准输出设备\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n从标准输入读取字符\n从标准输出读取数据\n从标准错误读取数据\n检查标准输入是否可读\n检查标准输出是否可读\n检查标准错误是否可读\n检查标准输入是否可写\n检查标准输出是否可写\n检查标准错误是否可写\n向标准输入写入数据\n向标准输出写入文本\n向标准错误写入文本\nPanic 处理器\n简单日志实现\n全局时间戳计数器\n获取 CPU ID\n检查是否应该记录指定级别的日志\n刷新日志输出缓冲区\nReturns the argument unchanged.\n初始化日志系统\nCalls <code>U::from(self)</code>.\n记录一条日志\n获取线程 ID\n获取时间戳\n内存地址管理模块\n物理页帧分配器模块\n内核堆内存分配器\n初始化内存管理系统\n内存集合管理模块\n页表管理模块\n物理地址 (Physical Address)\n物理页号 (Physical Page Number)\n简单范围类型\n简单范围迭代器\n支持单步递增的类型 trait\n虚拟页号范围类型别名\n虚拟地址 (Virtual Address)\n虚拟页号 (Virtual Page Number)\n获取指定类型的不可变引用\n检查地址是否页对齐\n检查地址是否页对齐\n获取页面字节数组\n向上对齐到页边界\n向上对齐到页边界\n获取范围结束值\n向下对齐到页边界\n向下对齐到页边界\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取三级页表索引\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n将范围转换为迭代器\n获取指定类型的可变引用\n获取指定类型的可变引用\n创建新的范围迭代器\n创建新的范围\n返回迭代器的下一个值\n获取页内偏移\n获取页内偏移\n获取页表项数组\n获取范围起始值\n将值递增一步\n物理页号递增\n虚拟页号递增\n全局页帧分配器实例\n页帧分配器 trait\n全局页帧分配器实现类型别名\n页帧跟踪器 (Frame Tracker)\n栈式页帧分配器\n分配一个物理页帧\n分配一个物理页帧\n下一个待分配的页号\n下一个待分配的页号\n释放一个物理页帧\n释放一个物理页帧\n页帧跟踪器析构函数\n分配区间结束页号（不包含）\n分配区间结束页号（不包含）\n格式化输出页帧跟踪器的调试信息\n分配一个物理页帧\n页帧分配器功能测试\n释放物理页帧（内部函数）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n初始化页帧分配器\n初始化全局页帧分配器\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的分配器实例\n创建新的栈式分配器实例\n创建新的页帧跟踪器\n跟踪的物理页号\n回收页帧列表\n回收页帧列表\n全局堆分配器实例\n内核堆内存空间\n堆分配错误处理器\n初始化内核堆分配器\n帧映射\n恒等映射\n全局内核地址空间\n内存映射区域\n内存映射权限\n内存映射类型\n内存集合（地址空间）\n可读权限 (Read)\n用户态访问权限 (User)\n可写权限 (Write)\n可执行权限 (Execute)\n激活地址空间\nGet a flags value with all known bits set.\n扩展内存区域到指定结束位置\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n将数据复制到映射区域\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从另一个内存区域创建新的映射区域\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\n从 ELF 文件创建用户地址空间\n从现有用户地址空间创建完全独立的副本\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n插入帧映射内存区域\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n获取内核地址空间的页表标识符\n将整个内存区域映射到页表\n映射单个虚拟页面\n映射 Trampoline 页面\n创建新的内存映射区域\n创建空的地址空间\n创建内核地址空间\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n将内存区域添加到地址空间\n回收数据页（仅清空区域元数据）\n重映射测试函数\nThe intersection of a source flags value with the …\n移除指定起始虚拟页号的内存区域\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n缩小内存区域到指定结束位置\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n获取地址空间的页表标识符\n转换虚拟页号到页表项\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n从页表中取消整个内存区域的映射\n取消单个虚拟页面的映射\nAccessed - 访问位，硬件设置表示页面已被访问\nDirty - 脏页位，硬件设置表示页面已被修改\nGlobal - 全局页面，为 1 表示全局可见\n页表项标志位 (Page Table Entry Flags)\n页表 (Page Table)\n页表项 (Page Table Entry)\nRead - 读权限，为 1 表示可读\nUser - 用户权限，为 1 表示用户态可访问\n用户缓冲区抽象\n用户缓冲区迭代器\nValid - 页表项有效，为 1 表示映射有效\nWrite - 写权限，为 1 表示可写\nExecute - 执行权限，为 1 表示可执行指令\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\n页表项的原始位表示\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n物理页面切片列表\n物理页面切片列表\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n当前缓冲区索引\n当前缓冲区中的字节索引\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n创建空的页表项\n检查页面是否可执行\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n查找页表项（只读查找）\n查找页表项（按需创建中间页表）\n提取标志位\n页表页帧追踪器列表\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n从 satp 寄存器值创建页表\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n将用户缓冲区转换为迭代器\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\n检查页表项是否有效\nYield a set of contained flags values.\nYield a set of contained named flags values.\n获取缓冲区总长度\n建立虚拟页到物理页的映射\n创建新的页表\n创建新的用户缓冲区\n创建新的页表项\n返回迭代器的下一个字节指针\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n提取物理页号\n检查页面是否可读\nThe intersection of a source flags value with the …\n根页表的物理页号\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n获取页表令牌\n执行虚拟地址转换\n…\n转换跨页面字节缓冲区\n将用户虚拟地址转换为内核可写引用\n转换以 0 结尾的用户字符串为内核字符串\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n取消虚拟页的映射\n检查页面是否可写\n控制台读取单个字符（非阻塞）\n控制台输出单个字符\n关闭（或复位）系统\n设置时钟中断触发时间（绝对时间）\n打印函数调用栈追踪信息\n单处理器安全单元\n单处理器安全单元 (Uniprocessor Safe Cell)\n获取对内部数据的独占可变引用\nReturns the argument unchanged.\n内部的 RefCell，提供运行时借用检查\nCalls <code>U::from(self)</code>.\n创建一个新的 <code>UPSafeCell</code>\n文件系统相关系统调用\n进程管理相关系统调用\n系统调用分发器\n系统调用：关闭文件描述符\n系统调用：打开文件\n系统调用：从文件描述符读取数据\n系统调用：向文件描述符写入数据\n系统调用：执行新程序（exec）\n系统调用：进程退出\n系统调用：创建子进程（fork）\n系统调用：获取进程 PID\n系统调用：获取系统时间\n系统调用：等待子进程结束（waitpid）\n系统调用：让出 CPU 时间片\n空闲进程的 PID\n初始进程（initproc）\n将初始进程加入就绪队列\n任务上下文模块\n结束当前任务并切换到下一个任务\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n任务管理器模块\n进程 ID 和内核栈管理模块\n处理器管理模块\n让出当前任务并切换到下一个就绪任务\n任务上下文切换\n任务控制块模块\n任务上下文结构\nReturns the argument unchanged.\n创建指向陷阱返回的任务上下文\nCalls <code>U::from(self)</code>.\n返回地址寄存器 (ra)\n被调用者保存寄存器 (s0-s11)\n栈指针寄存器 (sp)\n创建零初始化的任务上下文\n全局任务管理器实例\n任务管理器\n向就绪队列添加任务\n向全局任务管理器添加任务\n从就绪队列获取下一个待调度任务\n从全局任务管理器获取下一个待调度任务\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的任务管理器实例\n就绪任务队列\n内核栈管理器\n全局进程 ID 分配器\n进程 ID 分配器\n进程 ID 句柄\n分配一个新的进程 ID\n下一个要分配的新 PID（从 0 开始递增）\n回收一个进程 ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n计算内核栈在虚拟地址空间中的位置\n创建新的 PID 分配器\n为指定进程创建新的内核栈\n关联的进程 …\n分配新的进程 ID\n在内核栈顶压入数据\n回收的 PID 池，后进先出的栈结构\n获取内核栈顶地址\n全局处理器实例\n处理器状态管理器\n获取当前正在执行的任务（克隆引用）\n当前正在执行的任务\n获取当前正在执行的任务（只读访问）\n获取当前任务的陷阱上下文\n获取当前任务的用户地址空间标识符\nReturns the argument unchanged.\nReturns the argument unchanged.\n空闲任务上下文\n获取空闲任务上下文的可变指针\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的处理器实例\n主调度循环 - 系统调度器的核心\n任务调度函数 - 从当前任务切换回调度器\n取出当前正在执行的任务\n取出当前正在执行的任务（转移所有权）\n执行任务上下文切换\n就绪状态\n运行状态\n任务控制块 (Task Control Block)\n任务控制块内部可变状态\n任务状态枚举\n僵尸状态\n分配新的文件描述符\n进程基础内存大小\n子进程列表\nExec 系统调用实现：替换进程映像\n进程退出码\n文件描述符表\nFork 系统调用实现：创建子进程\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取进程 ID\n内部可变状态\n获取内部状态的排他访问权\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n检查任务是否为僵尸状态\n内核栈\n进程地址空间\n从 ELF 文件创建新的任务控制块\n父进程引用\n进程标识符句柄\n获取任务状态\n任务上下文\n任务当前状态\n获取陷阱上下文的可变引用\n陷阱上下文物理页号\n获取用户地址空间的页表标识符\n每秒的毫秒数常量\n每秒的时钟中断次数 (100Hz)\n设置下一次时钟中断触发时间\n获取当前系统时间（时钟周期数）\n获取当前系统时间（毫秒）\n陷阱上下文模块\n启用时钟中断\n初始化陷阱处理系统\n设置内核态陷阱入口\n设置用户态陷阱入口\n内核态陷阱处理函数\n陷阱处理主函数\n陷阱返回函数\n陷阱上下文结构\n创建应用程序初始陷阱上下文\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n内核页表标识符\n内核栈指针\n监督者异常程序计数器 (sepc)\n设置栈指针寄存器\n监督者状态寄存器 (sstatus)\n陷阱处理函数地址\n通用寄存器 x0-x31")