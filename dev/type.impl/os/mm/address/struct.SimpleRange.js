(function() {
    var type_impls = Object.fromEntries([["os",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SimpleRange%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#607\">Source</a><a href=\"#impl-Clone-for-SimpleRange%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clone for <a class=\"struct\" href=\"os/mm/address/struct.SimpleRange.html\" title=\"struct os::mm::address::SimpleRange\">SimpleRange</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"os/mm/address/trait.StepByOne.html\" title=\"trait os::mm::address::StepByOne\">StepByOne</a> + Copy + PartialEq + PartialOrd + Debug + Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#607\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"os/mm/address/struct.SimpleRange.html\" title=\"struct os::mm::address::SimpleRange\">SimpleRange</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","os::mm::address::VPNRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-SimpleRange%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#667-684\">Source</a><a href=\"#impl-IntoIterator-for-SimpleRange%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoIterator for <a class=\"struct\" href=\"os/mm/address/struct.SimpleRange.html\" title=\"struct os::mm::address::SimpleRange\">SimpleRange</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"os/mm/address/trait.StepByOne.html\" title=\"trait os::mm::address::StepByOne\">StepByOne</a> + Copy + PartialEq + PartialOrd + Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#681-683\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; Self::IntoIter</h4></section></summary><div class=\"docblock\"><p>将范围转换为迭代器</p>\n<p>创建一个可以遍历范围内所有值的迭代器，支持 <code>for</code> 循环语法。</p>\n<h6 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h6>\n<p>范围迭代器，按递增顺序产生范围内的每个值</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#671\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#672\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"os/mm/address/struct.SimpleRangeIterator.html\" title=\"struct os::mm::address::SimpleRangeIterator\">SimpleRangeIterator</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","os::mm::address::VPNRange"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimpleRange%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#616-665\">Source</a><a href=\"#impl-SimpleRange%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"os/mm/address/struct.SimpleRange.html\" title=\"struct os::mm::address::SimpleRange\">SimpleRange</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"os/mm/address/trait.StepByOne.html\" title=\"trait os::mm::address::StepByOne\">StepByOne</a> + Copy + PartialEq + PartialOrd + Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#643-646\">Source</a><h4 class=\"code-header\">pub fn <a href=\"os/mm/address/struct.SimpleRange.html#tymethod.new\" class=\"fn\">new</a>(start: T, end: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>创建新的范围</p>\n<p>创建一个从 <code>start</code> 到 <code>end</code>（不包含）的半开区间范围。</p>\n<h6 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h6>\n<ul>\n<li><code>start</code> - 范围起始值（包含）</li>\n<li><code>end</code> - 范围结束值（不包含）</li>\n</ul>\n<h6 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h6>\n<p>新创建的范围对象</p>\n<h6 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h6>\n<p>如果 <code>start &gt; end</code> 则触发 panic</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>range = SimpleRange::new(VirtPageNum(<span class=\"number\">100</span>), VirtPageNum(<span class=\"number\">200</span>));\n<span class=\"comment\">// 创建包含页号 100-199 的范围</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_start\" class=\"method\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#653-655\">Source</a><h4 class=\"code-header\">pub fn <a href=\"os/mm/address/struct.SimpleRange.html#tymethod.get_start\" class=\"fn\">get_start</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>获取范围起始值</p>\n<h6 id=\"returns-1\"><a class=\"doc-anchor\" href=\"#returns-1\">§</a>Returns</h6>\n<p>范围的起始值（包含在范围内）</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_end\" class=\"method\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#662-664\">Source</a><h4 class=\"code-header\">pub fn <a href=\"os/mm/address/struct.SimpleRange.html#tymethod.get_end\" class=\"fn\">get_end</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>获取范围结束值</p>\n<h6 id=\"returns-2\"><a class=\"doc-anchor\" href=\"#returns-2\">§</a>Returns</h6>\n<p>范围的结束值（不包含在范围内）</p>\n</div></details></div></details>",0,"os::mm::address::VPNRange"],["<section id=\"impl-Copy-for-SimpleRange%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/os/mm/address.rs.html#607\">Source</a><a href=\"#impl-Copy-for-SimpleRange%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Copy for <a class=\"struct\" href=\"os/mm/address/struct.SimpleRange.html\" title=\"struct os::mm::address::SimpleRange\">SimpleRange</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"os/mm/address/trait.StepByOne.html\" title=\"trait os::mm::address::StepByOne\">StepByOne</a> + Copy + PartialEq + PartialOrd + Debug + Copy,</div></h3></section>","Copy","os::mm::address::VPNRange"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[8230]}