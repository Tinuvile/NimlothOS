searchState.loadedDescShard("os", 0, "NimlothOS\nConstants used in rCore for qemu\n清零 BSS 段\n内核配置常量\n控制台输出模块\n调试级别日志宏\n错误级别日志宏\n信息级别日志宏\n语言项实现模块\n应用程序加载器模块\n日志系统模块\n内存管理模块\n格式化打印宏（不换行）\n格式化打印宏（带换行）\n内核主入口函数\nSBI (Supervisor Binary Interface) 调用模块\n栈追踪和调试模块\n同步原语模块\n系统调用处理模块\n任务管理模块\n时钟和定时器管理模块\n跟踪级别日志宏\n陷阱和中断处理模块\n警告级别日志宏\n内核堆大小 (3MB)\n内核栈大小 (8KB)\n页面大小 (4KB)\n页面大小的位数 (12 位)\n跳板页地址\n陷阱上下文页地址\n用户栈大小 (8KB)\n计算指定应用程序的内核栈位置\n标准输出结构体\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n格式化输出函数\n将字符串写入标准输出\nPanic 处理器\n获取指定应用程序的二进制数据\n获取嵌入的应用程序数量\n简单日志实现\n全局时间戳计数器\n检查是否应该记录指定级别的日志\n刷新日志输出缓冲区\nReturns the argument unchanged.\n获取 CPU ID\n获取线程 ID\n获取时间戳\n初始化日志系统\nCalls <code>U::from(self)</code>.\n记录一条日志\n内存地址管理模块\n物理页帧分配器模块\n内核堆内存分配器\n初始化内存管理系统\n内存集合管理模块\n页表管理模块\n物理地址 (Physical Address)\n物理页号 (Physical Page Number)\n简单范围类型\n简单范围迭代器\n支持单步递增的类型 trait\n虚拟页号范围类型别名\n虚拟地址 (Virtual Address)\n虚拟页号 (Virtual Page Number)\n检查地址是否页对齐\n检查地址是否页对齐\n向上对齐到页边界\n向上对齐到页边界\n向下对齐到页边界\n向下对齐到页边界\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取页面字节数组\n获取范围结束值\n获取指定类型的可变引用\n获取页表项数组\n获取范围起始值\n获取三级页表索引\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n将范围转换为迭代器\n创建新的范围迭代器\n创建新的范围\n返回迭代器的下一个值\n获取页内偏移\n获取页内偏移\n将值递增一步\n虚拟页号递增\n全局页帧分配器实例\n页帧分配器 trait\n全局页帧分配器实现类型别名\n页帧跟踪器 (Frame Tracker)\n栈式页帧分配器\n分配一个物理页帧\n分配一个物理页帧\n下一个待分配的页号\n下一个待分配的页号\n释放一个物理页帧\n释放一个物理页帧\n页帧跟踪器析构函数\n分配区间结束页号（不包含）\n分配区间结束页号（不包含）\n格式化输出页帧跟踪器的调试信息\n分配一个物理页帧\n页帧分配器功能测试\n释放物理页帧（内部函数）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n初始化页帧分配器\n初始化全局页帧分配器\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n创建新的分配器实例\n创建新的栈式分配器实例\n创建新的页帧跟踪器\n跟踪的物理页号\n回收页帧列表\n回收页帧列表\n全局堆分配器实例\n内核堆内存空间\n堆分配错误处理器\n初始化内核堆分配器\n帧映射\n恒等映射\n全局内核地址空间\n内存映射区域\n内存映射权限\n内存映射类型\n内存集合（地址空间）\n可读权限 (Read)\n用户态访问权限 (User)\n可写权限 (Write)\n可执行权限 (Execute)\n激活地址空间\nGet a flags value with all known bits set.\n扩展内存区域到指定结束位置\n扩展地址空间中的内存区域\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n将数据复制到映射区域\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\n从 ELF 文件创建用户地址空间\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n插入帧映射内存区域\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n将整个内存区域映射到页表\n映射单个虚拟页面\n映射 Trampoline 页面\n创建新的内存映射区域\n创建空的地址空间\n创建内核地址空间\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n将内存区域添加到地址空间\n重映射测试函数\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n缩小内存区域到指定结束位置\n缩小地址空间中的内存区域\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n获取地址空间的页表标识符\n转换虚拟页号到页表项\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n从页表中取消整个内存区域的映射\n取消单个虚拟页面的映射\nAccessed - 访问位，硬件设置表示页面已被访问\nDirty - 脏页位，硬件设置表示页面已被修改\nGlobal - 全局页面，为 1 表示全局可见\n页表项标志位 (Page Table Entry Flags)\n页表 (Page Table)\n页表项 (Page Table Entry)\nRead - 读权限，为 1 表示可读\nUser - 用户权限，为 1 表示用户态可访问\nValid - 页表项有效，为 1 表示映射有效\nWrite - 写权限，为 1 表示可写\nExecute - 执行权限，为 1 表示可执行指令\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\n页表项的原始位表示\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\n创建空的页表项\n检查页面是否可执行\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n查找页表项（只读查找）\n查找页表项（按需创建中间页表）\n提取标志位\n页表页帧追踪器列表\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n从 satp 寄存器值创建页表\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\n检查页表项是否有效\nYield a set of contained flags values.\nYield a set of contained named flags values.\n建立虚拟页到物理页的映射\n创建新的页表\n创建新的页表项\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n提取物理页号\n检查页面是否可读\nThe intersection of a source flags value with the …\n根页表的物理页号\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n获取页表令牌\n执行虚拟地址转换\n转换跨页面字节缓冲区\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n取消虚拟页的映射\n检查页面是否可写\n冷重启 - 完全断电重启\n无特定原因\n清除处理器间中断 (未使用)\n控制台字符输入 (未使用)\n控制台字符输出\n远程指令缓存刷新 (未使用)\n远程地址空间刷新 (未使用)\n带 ASID 的远程地址空间刷新 (未使用)\n发送处理器间中断 (未使用)\nSBI Legacy 扩展函数 ID 设置时钟中断触发时间\n系统关闭 (Legacy)\n系统复位函数 ID\n系统复位扩展 ID (SRST)\nSBI 调用返回值结构\n正常关闭系统\n系统故障导致的复位\n系统复位原因枚举\n系统复位类型枚举\n热重启 - 不断电重启\n控制台字符输出\n错误码，0 表示成功，负值表示错误\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n执行 SBI 调用\n设置时钟中断触发时间\n系统关闭\n实际返回值，具体含义取决于调用的 SBI 函数\n打印函数调用栈追踪信息\n单处理器安全单元\n单处理器安全单元 (Uniprocessor Safe Cell)\n获取对内部数据的独占可变引用\nReturns the argument unchanged.\n内部的 RefCell，提供运行时借用检查\nCalls <code>U::from(self)</code>.\n创建一个新的 <code>UPSafeCell</code>\n系统调用号：进程退出\n系统调用号：获取时间\n系统调用号：调整程序断点\n系统调用号：写操作\n系统调用号：让出 CPU\n文件系统相关系统调用\n进程管理相关系统调用\n系统调用分发器\n标准输出文件描述符\n系统调用：向文件描述符写入数据\n系统调用：进程退出\n系统调用：获取系统时间\n系统调用：调整程序断点（堆管理）\n系统调用：让出 CPU 时间片\n全局任务管理器实例\n任务管理器\n任务管理器内部状态\n修改当前任务的程序断点\n修改当前任务的程序断点\n任务上下文模块\n当前正在运行的任务 ID\n获取当前任务的陷阱上下文\n获取当前任务的用户地址空间标识符\n终止当前任务并切换到下一个任务\n查找下一个可运行的任务\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取当前任务的用户地址空间标识符\n获取当前任务的陷阱上下文\n任务管理器的内部状态，使用 UPSafeCell …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n将当前任务标记为已退出状态\n将当前任务标记为已退出状态\n将当前任务标记为挂起状态\n将当前任务标记为挂起状态\n系统中的应用程序数量\n启动第一个任务\n启动第一个任务\n切换到下一个就绪任务\n切换到下一个任务\n挂起当前任务并切换到下一个任务\n任务上下文切换\n任务控制块和任务状态\n所有任务的控制块数组\n任务上下文结构\nReturns the argument unchanged.\n创建指向陷阱返回的任务上下文\nCalls <code>U::from(self)</code>.\n返回地址寄存器 (ra)\n被调用者保存寄存器 (s0-s11)\n栈指针寄存器 (sp)\n创建零初始化的任务上下文\n执行任务上下文切换\n已退出状态\n就绪状态\n运行状态\n任务控制块 (Task Control Block, TCB)\n任务状态枚举\n未初始化状态\n基础大小（用户栈顶地址）\n修改程序断点（堆大小调整）\nReturns the argument unchanged.\nReturns the argument unchanged.\n获取任务的陷阱上下文\n获取用户地址空间的页表标识符\n堆底部地址\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n任务的内存地址空间\n创建新的任务控制块\n程序断点（当前堆顶）\n任务上下文\n任务当前状态\n陷阱上下文的物理页号\n每秒的毫秒数常量\n每秒的时钟中断次数 (100Hz)\n获取系统时间（时钟周期）\n获取系统时间（毫秒）\n设置下一次时钟中断触发时间\n陷阱上下文模块\n启用时钟中断\n初始化陷阱处理系统\n设置内核态陷阱入口\n设置用户态陷阱入口\n内核态陷阱处理函数\n陷阱处理主函数\n陷阱返回函数\n陷阱上下文结构\n创建应用程序初始陷阱上下文\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n内核页表标识符\n内核栈指针\n监督者异常程序计数器 (sepc)\n设置栈指针寄存器\n监督者状态寄存器 (sstatus)\n陷阱处理函数地址\n通用寄存器 x0-x31")