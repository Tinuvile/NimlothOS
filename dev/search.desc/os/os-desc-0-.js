searchState.loadedDescShard("os", 0, "NimlothOS\nConstants used in rCore for qemu\n清零 BSS 段\n内核配置常量\n控制台输出模块\n调试级别日志宏\n错误级别日志宏\n信息级别日志宏\n语言项实现模块\n应用程序加载器模块\n日志系统模块\n格式化打印宏（不换行）\n格式化打印宏（带换行）\n内核主入口函数\nSBI (Supervisor Binary Interface) 调用模块\n栈追踪和调试模块\n同步原语模块\n系统调用处理模块\n任务管理模块\n时钟和定时器管理模块\n跟踪级别日志宏\n陷阱和中断处理模块\n警告级别日志宏\n应用程序加载基地址\n单个应用程序大小限制 (128KB)\n内核堆大小 (3MB)\n内核栈大小 (8KB)\n最大应用程序数量\n页面大小 (4KB)\n页面大小的位数 (12 位)\n跳板页地址\n陷阱上下文页地址\n用户栈大小 (8KB)\n计算指定应用程序的内核栈位置\n标准输出结构体\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n格式化输出函数\n将字符串写入标准输出\nPanic 处理器\n所有应用程序的内核栈数组\n内核栈结构\n所有应用程序的用户栈数组\n用户栈结构\n栈数据区域，大小为 <code>KERNEL_STACK_SIZE</code> (8KB)\n栈数据区域，大小为 <code>USER_STACK_SIZE</code> (8KB)\nReturns the argument unchanged.\nReturns the argument unchanged.\n计算应用程序的加载基地址\n获取应用程序数量\n获取内核栈栈顶指针\n获取用户栈栈顶指针\n初始化应用程序上下文\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n加载所有应用程序到内存\n将陷阱上下文压入内核栈\n简单日志实现\n全局时间戳计数器\n检查是否应该记录指定级别的日志\n刷新日志输出缓冲区\nReturns the argument unchanged.\n获取 CPU ID\n获取线程 ID\n获取时间戳\n初始化日志系统\nCalls <code>U::from(self)</code>.\n记录一条日志\n内核堆内存分配器\n全局堆分配器实例\n内核堆内存空间\n堆分配错误处理器\n初始化内核堆分配器\n冷重启 - 完全断电重启\n无特定原因\n清除处理器间中断 (未使用)\n控制台字符输入 (未使用)\n控制台字符输出\n远程指令缓存刷新 (未使用)\n远程地址空间刷新 (未使用)\n带 ASID 的远程地址空间刷新 (未使用)\n发送处理器间中断 (未使用)\nSBI Legacy 扩展函数 ID 设置时钟中断触发时间\n系统关闭 (Legacy)\n系统复位函数 ID\n系统复位扩展 ID (SRST)\nSBI 调用返回值结构\n正常关闭系统\n系统故障导致的复位\n系统复位原因枚举\n系统复位类型枚举\n热重启 - 不断电重启\n控制台字符输出\n错误码，0 表示成功，负值表示错误\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n执行 SBI 调用\n设置时钟中断触发时间\n系统关闭\n实际返回值，具体含义取决于调用的 SBI 函数\n打印函数调用栈追踪信息\n单处理器安全单元\n单处理器安全单元 (Uniprocessor Safe Cell)\n获取对内部数据的独占可变引用\nReturns the argument unchanged.\n内部的 RefCell，提供运行时借用检查\nCalls <code>U::from(self)</code>.\n创建一个新的 <code>UPSafeCell</code>\n系统调用号：进程退出\n系统调用号：获取时间\n系统调用号：写操作\n系统调用号：让出 CPU\n文件系统相关系统调用\n进程管理相关系统调用\n系统调用分发器\n标准输出文件描述符\n系统调用：向文件描述符写入数据\n系统调用：进程退出\n系统调用：获取系统时间\n系统调用：让出 CPU 时间片\n全局任务管理器实例\n任务管理器\n任务管理器内部状态\n任务上下文模块\n当前正在运行的任务 ID\n终止当前任务并切换到下一个任务\n查找下一个可运行的任务\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n任务管理器的内部状态，使用 UPSafeCell …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n将当前任务标记为已退出状态\n将当前任务标记为已退出状态\n将当前任务标记为挂起状态\n将当前任务标记为挂起状态\n系统中的应用程序数量\n启动第一个任务\n启动第一个任务\n切换到下一个就绪任务\n切换到下一个任务\n挂起当前任务并切换到下一个任务\n任务上下文切换\n任务控制块和任务状态\n所有任务的控制块数组\n任务上下文结构\nReturns the argument unchanged.\n创建指向陷阱恢复函数的任务上下文\nCalls <code>U::from(self)</code>.\n返回地址寄存器 (ra)\n被调用者保存寄存器 (s0-s11)\n栈指针寄存器 (sp)\n创建零初始化的任务上下文\n执行任务上下文切换\n已退出状态\n就绪状态\n运行状态\n任务控制块 (Task Control Block, TCB)\n任务状态枚举\n未初始化状态\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n任务上下文\n任务当前状态\n每秒的毫秒数常量\n每秒的时钟中断次数 (100Hz)\n获取系统时间（时钟周期）\n获取系统时间（毫秒）\n设置下一次时钟中断触发时间\n陷阱上下文模块\n启用时钟中断\n初始化陷阱处理系统\n陷阱处理器主函数\n陷阱上下文结构\n创建应用程序初始陷阱上下文\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n监督者异常程序计数器 (sepc)\n设置栈指针寄存器\n监督者状态寄存器 (sstatus)\n通用寄存器 x0-x31")