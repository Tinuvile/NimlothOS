//! # 设备驱动模块
//!
//! 提供操作系统内核的设备驱动功能，包括块设备、字符设备等各种硬件设备的抽象接口。
//! 通过统一的设备抽象层，为上层文件系统和用户程序提供硬件访问能力。
//!
//! ## 模块组织
//!
//! - [`block`] - 块设备驱动，支持磁盘、存储设备等块级 I/O 操作
//! - 其他设备驱动模块（待扩展）
//!
//! ## 设计目标
//!
//! - **统一接口**: 为不同类型的设备提供统一的抽象接口
//! - **类型安全**: 通过 trait 约束确保设备操作的类型安全
//! - **性能优化**: 支持高效的设备 I/O 操作
//! - **可扩展性**: 支持新设备类型的轻松添加
//!
//! ## 设备驱动特性
//!
//! - **块设备**: 支持以块为单位的随机访问 I/O
//! - **字符设备**: 支持字节流式的顺序访问 I/O
//! - **中断处理**: 支持设备中断的异步处理
//! - **DMA 支持**: 支持直接内存访问操作
//!
//! ## 使用示例
//!
//! ```rust
//! use crate::drivers::block::BLOCK_DEVICE;
//!
//! // 读取块设备数据
//! let mut buf = [0u8; 512];
//! BLOCK_DEVICE.read_block(0, &mut buf);
//!
//! // 写入块设备数据
//! let data = [0x42u8; 512];
//! BLOCK_DEVICE.write_block(0, &data);
//! ```

pub mod block;

pub use block::BLOCK_DEVICE;
