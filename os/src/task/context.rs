//! # 任务上下文模块
//!
//! 定义任务上下文结构，用于在任务切换时保存和恢复 CPU 寄存器状态。
//! 任务上下文包含了任务切换时需要保存的所有寄存器信息。
use crate::trap::trap_return;

/// 任务上下文结构
///
/// 存储任务在被切换时的 CPU 寄存器状态。根据 RISC-V 调用约定，
/// 只需要保存调用者保存寄存器 (callee-saved registers)。
///
/// ## 内存布局
///
/// 该结构体使用 `#[repr(C)]` 确保字段按 C 语言结构体布局排列，
/// 这样汇编代码可以通过固定偏移访问各个字段。
///
/// ## 寄存器说明
///
/// - `ra`: 返回地址寄存器，存储函数返回地址
/// - `sp`: 栈指针寄存器，指向当前栈顶
/// - `s0-s11`: 被调用者保存寄存器，需要在函数调用间保持不变
///
/// ## 切换原理
///
/// 在任务切换时：
/// 1. 将当前任务的这些寄存器值保存到其 TaskContext 中
/// 2. 从目标任务的 TaskContext 恢复寄存器值
/// 3. 通过 `ret` 指令跳转到目标任务的 `ra` 地址继续执行
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TaskContext {
    /// 返回地址寄存器 (ra)
    ///
    /// 存储任务恢复执行时应该跳转到的地址。
    /// 对于新创建的任务，通常指向 `__restore` 函数。
    ra: usize,

    /// 栈指针寄存器 (sp)
    ///
    /// 指向任务的内核栈顶。任务切换时会恢复此栈指针，
    /// 确保任务在正确的栈上继续执行。
    sp: usize,

    /// 被调用者保存寄存器 (s0-s11)
    ///
    /// RISC-V 调用约定中的被调用者保存寄存器，函数调用时
    /// 被调用函数需要保证这些寄存器的值不变。
    s: [usize; 12],
}

impl TaskContext {
    /// 创建零初始化的任务上下文
    ///
    /// 创建一个所有寄存器都为零的任务上下文，通常用作临时变量
    /// 或占位符，不代表真实的任务状态。
    ///
    /// ## Returns
    ///
    /// 返回一个所有字段都为 0 的 `TaskContext` 实例
    ///
    /// ## Use Cases
    ///
    /// - 在 `run_first_task` 中作为当前上下文的占位符
    /// - 初始化任务数组时的默认值
    pub fn zero_init() -> Self {
        Self {
            ra: 0,
            sp: 0,
            s: [0; 12],
        }
    }

    /// 创建指向陷阱返回的任务上下文
    ///
    /// 为新任务创建一个任务上下文，设置返回地址指向 `trap_return` 函数。
    /// 这使得当任务首次被调度时，会跳转到 `trap_return` 执行，从而
    /// 恢复陷阱上下文并进入用户态开始执行。
    ///
    /// ## Arguments
    ///
    /// * `kstack_ptr` - 内核栈指针，指向该任务的内核栈顶
    ///
    /// ## Returns
    ///
    /// 配置好的任务上下文，可用于任务首次调度
    ///
    /// ## 执行流程
    ///
    /// 当此上下文被 `__switch` 恢复时：
    /// 1. 恢复栈指针到指定的内核栈
    /// 2. 通过 `ret` 指令跳转到 `trap_return` 函数
    /// 3. `trap_return` 恢复陷阱上下文并切换到用户态
    /// 4. 用户程序开始执行
    ///
    /// ## 与 `zero_init()` 的区别
    ///
    /// | 方法 | 返回地址 | 用途 |
    /// |------|----------|------|
    /// | `zero_init()` | 0 | 临时占位符 |
    /// | `goto_trap_return()` | `trap_return` | 新任务初始化 |
    ///
    /// ## 设计原理
    ///
    /// 新创建的任务需要一个特殊的启动流程：
    /// - 不能直接跳转到用户代码（缺少完整的用户态上下文）
    /// - 必须通过 `trap_return` 建立完整的用户态环境
    /// - 这种设计统一了任务切换和陷阱返回的机制
    ///
    /// ## Examples
    ///
    /// ```rust
    /// // 为新任务创建上下文
    /// let task_cx = TaskContext::goto_trap_return(kernel_stack_top);
    ///
    /// // 任务首次调度时的执行路径：
    /// // __switch -> trap_return -> __restore -> 用户程序
    /// ```
    pub fn goto_trap_return(kstack_ptr: usize) -> Self {
        Self {
            ra: trap_return as usize,
            sp: kstack_ptr,
            s: [0; 12],
        }
    }
}
